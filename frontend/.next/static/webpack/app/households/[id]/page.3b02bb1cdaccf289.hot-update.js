"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/households/[id]/page",{

/***/ "(app-pages-browser)/./src/lib/mock-api-data.ts":
/*!**********************************!*\
  !*** ./src/lib/mock-api-data.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getMockActivity: function() { return /* binding */ getMockActivity; },\n/* harmony export */   getMockAllocation: function() { return /* binding */ getMockAllocation; },\n/* harmony export */   getMockCash: function() { return /* binding */ getMockCash; },\n/* harmony export */   getMockOverview: function() { return /* binding */ getMockOverview; },\n/* harmony export */   getMockPerformance: function() { return /* binding */ getMockPerformance; },\n/* harmony export */   getMockPlanning: function() { return /* binding */ getMockPlanning; },\n/* harmony export */   getMockPositions: function() { return /* binding */ getMockPositions; },\n/* harmony export */   getMockReports: function() { return /* binding */ getMockReports; }\n/* harmony export */ });\n/* harmony import */ var _mock_households__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mock-households */ \"(app-pages-browser)/./src/lib/mock-households.ts\");\n\nfunction getMockOverview(householdId) {\n    const household = (0,_mock_households__WEBPACK_IMPORTED_MODULE_0__.getHouseholdById)(householdId);\n    if (!household) throw new Error(\"Household not found\");\n    return {\n        household: {\n            id: household.id,\n            name: household.name,\n            primaryAdvisor: household.advisorName,\n            riskProfile: household.riskProfile === \"Ultra-Conservative\" ? \"Conservative\" : household.riskProfile,\n            lastSync: new Date().toISOString()\n        },\n        totalAssets: household.totalAssets,\n        ytdReturn: household.ytdPerformance,\n        benchmarkReturn: household.ytdPerformance * 0.9,\n        accountsCount: household.accountsCount,\n        totalCash: household.totalCash,\n        avgCashYield: 2.5,\n        executiveSummary: [\n            \"Portfolio performance of \".concat(household.ytdPerformance, \"% YTD\"),\n            \"Total assets under management: $\".concat((household.totalAssets / 1000000).toFixed(1), \"M\"),\n            \"Risk profile aligned with \".concat(household.riskProfile.toLowerCase(), \" strategy\")\n        ],\n        lastUpdated: new Date().toISOString()\n    };\n}\nfunction getMockPerformance(householdId, range) {\n    const household = (0,_mock_households__WEBPACK_IMPORTED_MODULE_0__.getHouseholdById)(householdId);\n    if (!household) throw new Error(\"Household not found\");\n    const validRanges = [\n        \"3M\",\n        \"6M\",\n        \"1Y\",\n        \"3Y\",\n        \"5Y\"\n    ];\n    const validRange = validRanges.includes(range) ? range : \"6M\";\n    // Generate performance data based on the selected range\n    const rangeConfig = {\n        \"3M\": {\n            days: 90,\n            points: 30\n        },\n        \"6M\": {\n            days: 180,\n            points: 60\n        },\n        \"1Y\": {\n            days: 365,\n            points: 120\n        },\n        \"3Y\": {\n            days: 365 * 3,\n            points: 150\n        },\n        \"5Y\": {\n            days: 365 * 5,\n            points: 200\n        }\n    };\n    const config = rangeConfig[validRange];\n    const data = [];\n    // Create more distinct patterns for each range\n    const baseValue = household.totalAssets;\n    const baseReturn = household.ytdPerformance / 100;\n    for(let i = 0; i < config.points; i++){\n        const date = new Date();\n        date.setDate(date.getDate() - (config.days - i * config.days / config.points));\n        const progress = i / config.points;\n        // Different performance patterns for different ranges\n        let performanceMultiplier;\n        let volatilityFactor;\n        switch(validRange){\n            case \"3M\":\n                performanceMultiplier = 0.2; // 20% of YTD performance\n                volatilityFactor = 0.02; // Lower volatility for short term\n                break;\n            case \"6M\":\n                performanceMultiplier = 0.5; // 50% of YTD performance\n                volatilityFactor = 0.03;\n                break;\n            case \"1Y\":\n                performanceMultiplier = 1.0; // Full YTD performance\n                volatilityFactor = 0.04;\n                break;\n            case \"3Y\":\n                performanceMultiplier = 2.5; // Annualized over 3 years\n                volatilityFactor = 0.06;\n                break;\n            case \"5Y\":\n                performanceMultiplier = 4.0; // Annualized over 5 years\n                volatilityFactor = 0.08;\n                break;\n        }\n        // Add consistent but noticeable volatility\n        const seed = (householdId.charCodeAt(0) + i * 7 + validRange.charCodeAt(0)) % 100;\n        const volatility = Math.sin((seed + i) * 0.1) * volatilityFactor;\n        // Create trending performance with volatility\n        const trendReturn = baseReturn * performanceMultiplier * progress;\n        const finalValue = baseValue * (1 + trendReturn + volatility);\n        const benchmarkValue = baseValue * (1 + trendReturn * 0.85 + volatility * 0.3);\n        data.push({\n            date: date.toISOString().split(\"T\")[0],\n            value: Math.round(finalValue),\n            benchmark: Math.round(benchmarkValue)\n        });\n    }\n    return {\n        data,\n        range: validRange,\n        totalReturn: household.ytdPerformance * (validRange === \"3M\" ? 0.25 : validRange === \"6M\" ? 0.5 : 1),\n        benchmarkReturn: household.ytdPerformance * 0.8 * (validRange === \"3M\" ? 0.25 : validRange === \"6M\" ? 0.5 : 1),\n        volatility: 12.5,\n        sharpeRatio: 1.2\n    };\n}\nfunction getMockAllocation(householdId) {\n    const household = (0,_mock_households__WEBPACK_IMPORTED_MODULE_0__.getHouseholdById)(householdId);\n    if (!household) throw new Error(\"Household not found\");\n    return {\n        allocation: [\n            {\n                name: \"US Equity\",\n                value: 50,\n                percentage: 50,\n                color: \"#0f766e\"\n            },\n            {\n                name: \"International Equity\",\n                value: 20,\n                percentage: 20,\n                color: \"#3b82f6\"\n            },\n            {\n                name: \"Fixed Income\",\n                value: 25,\n                percentage: 25,\n                color: \"#10b981\"\n            },\n            {\n                name: \"Alternatives\",\n                value: 5,\n                percentage: 5,\n                color: \"#f59e0b\"\n            }\n        ],\n        policyDrift: 2.3,\n        rebalanceNeeded: false,\n        lastRebalance: \"2025-08-15T00:00:00Z\"\n    };\n}\nfunction getMockActivity(householdId) {\n    const household = (0,_mock_households__WEBPACK_IMPORTED_MODULE_0__.getHouseholdById)(householdId);\n    if (!household) throw new Error(\"Household not found\");\n    return {\n        activities: [\n            {\n                id: \"\".concat(householdId, \"-1\"),\n                type: \"meeting\",\n                priority: \"high\",\n                status: \"completed\",\n                date: new Date().toISOString(),\n                title: \"Quarterly Review - \".concat(household.name),\n                description: \"Portfolio review and planning discussion for \".concat(household.name),\n                tags: [\n                    \"review\",\n                    \"quarterly\",\n                    household.riskProfile.toLowerCase()\n                ],\n                author: household.advisorName\n            },\n            {\n                id: \"\".concat(householdId, \"-2\"),\n                type: \"trade\",\n                priority: \"medium\",\n                status: \"completed\",\n                date: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n                title: \"Portfolio Rebalancing - \".concat(household.name),\n                description: \"Executed rebalancing trades to maintain target allocation\",\n                tags: [\n                    \"rebalancing\",\n                    \"trade\"\n                ],\n                author: household.advisorName\n            }\n        ],\n        totalCount: 2,\n        hasMore: false\n    };\n}\nfunction generateCashTrendData(householdId, range, totalCash) {\n    const validRanges = [\n        \"3M\",\n        \"6M\",\n        \"1Y\"\n    ];\n    const validRange = validRanges.includes(range) ? range : \"6M\";\n    const rangeConfig = {\n        \"3M\": {\n            days: 90,\n            points: 20\n        },\n        \"6M\": {\n            days: 180,\n            points: 30\n        },\n        \"1Y\": {\n            days: 365,\n            points: 50\n        }\n    };\n    const config = rangeConfig[validRange];\n    const data = [];\n    for(let i = 0; i < config.points; i++){\n        const date = new Date();\n        date.setDate(date.getDate() - (config.days - i * config.days / config.points));\n        // Generate gradual trend with some variation\n        const progress = i / config.points;\n        const seed = (householdId.charCodeAt(0) + i) % 100;\n        const variation = (seed - 50) / 500; // Small variations\n        const balance = totalCash * (0.9 + 0.1 * progress + variation);\n        data.push({\n            date: date.toISOString().split(\"T\")[0],\n            balance: Math.max(0, balance),\n            checking: Math.max(0, balance * 0.4),\n            savings: Math.max(0, balance * 0.6),\n            cd: 0\n        });\n    }\n    return data;\n}\nfunction getMockCash(householdId) {\n    let range = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"6M\";\n    const household = (0,_mock_households__WEBPACK_IMPORTED_MODULE_0__.getHouseholdById)(householdId);\n    if (!household) throw new Error(\"Household not found\");\n    const checkingBalance = household.totalCash * 0.4;\n    const savingsBalance = household.totalCash * 0.6;\n    return {\n        accounts: [\n            {\n                id: \"\".concat(householdId, \"-checking\"),\n                name: \"\".concat(household.name, \" Checking\"),\n                type: \"checking\",\n                balance: checkingBalance,\n                apy: 0.1,\n                isActive: true,\n                institution: \"Chase Bank\"\n            },\n            {\n                id: \"\".concat(householdId, \"-savings\"),\n                name: \"\".concat(household.name, \" High Yield Savings\"),\n                type: \"savings\",\n                balance: savingsBalance,\n                apy: 4.5,\n                isActive: true,\n                institution: \"Marcus by Goldman Sachs\"\n            }\n        ],\n        totalBalance: household.totalCash,\n        avgYield: 2.8,\n        trendData: generateCashTrendData(householdId, range, household.totalCash),\n        alerts: []\n    };\n}\nfunction getMockPlanning(householdId) {\n    const household = (0,_mock_households__WEBPACK_IMPORTED_MODULE_0__.getHouseholdById)(householdId);\n    if (!household) throw new Error(\"Household not found\");\n    const isRetirementAge = household.name.includes(\"Retirement\") || household.riskProfile === \"Conservative\";\n    return {\n        rmds: isRetirementAge ? [\n            {\n                id: \"\".concat(householdId, \"-rmd-1\"),\n                accountName: \"Traditional IRA\",\n                owner: household.primaryContact,\n                dueDate: \"2025-12-31T23:59:59Z\",\n                requiredAmount: household.totalAssets * 0.04,\n                completedAmount: 0,\n                status: \"pending\"\n            }\n        ] : [],\n        beneficiaries: [\n            {\n                id: \"\".concat(householdId, \"-ben-1\"),\n                accountName: \"Primary Investment Account\",\n                accountType: \"Investment\",\n                hasPrimary: true,\n                hasContingent: true,\n                lastReviewed: \"2025-01-15T00:00:00Z\",\n                status: \"complete\"\n            }\n        ],\n        nextInteraction: {\n            date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n            type: \"review\",\n            description: \"Quarterly portfolio review and planning discussion\"\n        },\n        custodialTransitions: []\n    };\n}\nfunction getMockPositions(householdId) {\n    const household = (0,_mock_households__WEBPACK_IMPORTED_MODULE_0__.getHouseholdById)(householdId);\n    if (!household) throw new Error(\"Household not found\");\n    const investedAssets = household.totalAssets - household.totalCash;\n    const positions = [\n        {\n            id: \"\".concat(householdId, \"-pos-1\"),\n            symbol: \"AAPL\",\n            name: \"Apple Inc.\",\n            assetClass: \"Equity\",\n            quantity: Math.floor(investedAssets * 0.15 / 175),\n            marketValue: investedAssets * 0.15,\n            costBasis: investedAssets * 0.15 * 0.9,\n            weight: 15.0,\n            lastPrice: 175.25,\n            sector: \"Technology\"\n        },\n        {\n            id: \"\".concat(householdId, \"-pos-2\"),\n            symbol: \"VTI\",\n            name: \"Vanguard Total Stock Market ETF\",\n            assetClass: \"Equity\",\n            quantity: Math.floor(investedAssets * 0.35 / 240),\n            marketValue: investedAssets * 0.35,\n            costBasis: investedAssets * 0.35 * 0.95,\n            weight: 35.0,\n            lastPrice: 240.15\n        },\n        {\n            id: \"\".concat(householdId, \"-pos-3\"),\n            symbol: \"BND\",\n            name: \"Vanguard Total Bond Market ETF\",\n            assetClass: \"Fixed Income\",\n            quantity: Math.floor(investedAssets * 0.25 / 78),\n            marketValue: investedAssets * 0.25,\n            costBasis: investedAssets * 0.25 * 1.02,\n            weight: 25.0,\n            lastPrice: 78.45\n        }\n    ];\n    const totalMarketValue = positions.reduce((sum, pos)=>sum + pos.marketValue, 0);\n    const totalCostBasis = positions.reduce((sum, pos)=>sum + pos.costBasis, 0);\n    const totalGainLoss = totalMarketValue - totalCostBasis;\n    return {\n        positions,\n        summary: {\n            totalMarketValue,\n            totalCostBasis,\n            totalGainLoss,\n            totalGainLossPercent: totalGainLoss / totalCostBasis * 100,\n            positionsCount: positions.length\n        }\n    };\n}\nfunction getMockReports(householdId) {\n    const household = (0,_mock_households__WEBPACK_IMPORTED_MODULE_0__.getHouseholdById)(householdId);\n    if (!household) throw new Error(\"Household not found\");\n    return {\n        statements: [\n            {\n                id: \"\".concat(householdId, \"-stmt-monthly\"),\n                name: \"Monthly Statement - \".concat(household.name),\n                type: \"monthly\",\n                date: \"2025-09-01T00:00:00Z\",\n                size: \"2.3 MB\",\n                url: \"/statements/\".concat(householdId, \"/monthly-2025-09.pdf\")\n            },\n            {\n                id: \"\".concat(householdId, \"-stmt-quarterly\"),\n                name: \"Quarterly Performance Report - \".concat(household.name),\n                type: \"quarterly\",\n                date: \"2025-07-01T00:00:00Z\",\n                size: \"1.8 MB\",\n                url: \"/statements/\".concat(householdId, \"/quarterly-2025-q3.pdf\")\n            }\n        ],\n        analytics: [\n            {\n                id: \"\".concat(householdId, \"-analytics-performance\"),\n                name: \"Portfolio Performance Analysis\",\n                description: \"Comprehensive performance analysis for \".concat(household.name, \" including risk metrics and attribution\"),\n                generatedDate: \"2025-09-24T00:00:00Z\",\n                url: \"/analytics/\".concat(householdId, \"/performance-analysis.pdf\")\n            },\n            {\n                id: \"\".concat(householdId, \"-analytics-allocation\"),\n                name: \"Asset Allocation Review\",\n                description: \"Current vs target allocation with rebalancing recommendations\",\n                generatedDate: \"2025-09-20T00:00:00Z\",\n                url: \"/analytics/\".concat(householdId, \"/allocation-review.pdf\")\n            }\n        ]\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/mock-api-data.ts\n"));

/***/ })

});